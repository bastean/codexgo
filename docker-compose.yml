services:
  database:
    container_name: ${MONGO_CONTAINER_NAME}
    image: mongo:4.4
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    command: mongod --quiet --logpath /dev/null
    ports:
      - ${MONGO_INITDB_PORT}:${MONGO_INITDB_PORT}
    volumes:
      - codexgo-database:/data/db
    restart: ${MONGO_RESTART}
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD} --quiet | grep 1
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  backend:
    container_name: ${BACKEND_CONTAINER_NAME}
    image: ${BACKEND_IMAGE_TAG}
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BACKEND_BUILD_TARGET}
    environment:
      DATABASE_URI: "mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@database:${MONGO_INITDB_PORT}"
      JWT_SECRET_KEY: ${BACKEND_JWT_SECRET_KEY}
      ALLOWED_HOSTS: ${BACKEND_ALLOWED_HOSTS}
      GIN_MODE: ${BACKEND_MODE}
      PORT: ${BACKEND_PORT}
    command: ${BACKEND_COMMAND}
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    volumes:
      - ${BACKEND_VOLUMES_APP}
      - codexgo-modules:/go/pkg/mod
    restart: ${BACKEND_RESTART}
    depends_on:
      database:
        condition: service_healthy

volumes:
  codexgo-database:
    name: ${DATABASE_VOLUME}
  codexgo-backend:
    name: codexgo-backend
  codexgo-modules:
    name: codexgo-modules
