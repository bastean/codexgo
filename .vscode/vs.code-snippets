{
  /* -------------------------------------------------------------------------- */
  /*                                    Test                                    */
  /* -------------------------------------------------------------------------- */

  "Unit/Integration Test": {
    "prefix": ["go_unit", "go_integration"],
    "body": [
      "package ${TM_DIRECTORY/.*[\\/]/$1/}_test",
      "",
      "import (",
      "\t\"testing\"",
      "",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/services/suite\"",
      "",
      "\t$1",
      ")",
      "",
      "type ${2:_X_}TestSuite struct {",
      "\tsuite.Default",
      "\t${3:$LINE_COMMENT SUT}",
      "}",
      "",
      "func (s *$2TestSuite) SetupSuite() {",
      "\t$5",
      "}",
      "",
      "func (s *$2TestSuite) SetupTest() {",
      "\t$7",
      "}",
      "",
      "func (s *$2TestSuite) TestSentinel() {",
      "\t$9",
      "}",
      "",
      "func (s *$2TestSuite) Test$10$11${12|With,Without|}$13() {",
      "\t${14:$LINE_COMMENT Happy Path}",
      "}",
      "",
      "func (s *$2TestSuite) Test$15$16${17|Err,Panic|}$18() {",
      "\t${19:$LINE_COMMENT Corner Case}",
      "}",
      "",
      "func (s *$2TestSuite) TearDownTest() {",
      "\t$8",
      "}",
      "",
      "func (s *$2TestSuite) TearDownSuite() {",
      "\t$6",
      "}",
      "",
      "func Test${4|Unit,Integration|}$2Suite(t *testing.T) {",
      "\tsuite.Run(t, new($2TestSuite))",
      "}",
      "",
    ],
    "isFileTemplate": true,
    "scope": "go",
  },

  "Acceptance Test": {
    "prefix": ["go_acceptance"],
    "body": [
      "package ${TM_DIRECTORY/.*[\\/]/$1/}_test",
      "",
      "import (",
      "\t\"testing\"",
      "",
      "\ttestify \"github.com/stretchr/testify/assert\"",
      "",
      "\t$1",
      ")",
      "",
      "var (",
      "\terr              error",
      "\tassert           *testify.Assertions",
      "\texpected, actual string",
      ")",
      "",
      "func SetupAssert(t *testing.T) {",
      "\tassert = testify.New(t)",
      "}",
      "",
      "func TestAcceptance${2:_X_}${3|Suite,Features|}(t *testing.T) {",
      "\tSetupAssert(t)",
      "}",
      "",
    ],
    "isFileTemplate": true,
    "scope": "go",
  },

  "Test Suite": {
    "prefix": ["go_suite"],
    "body": [
      "package ${TM_DIRECTORY/.*[\\/]/$1/}",
      "",
      "import (",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/services/suite\"",
      "",
      "\t$1",
      ")",
      "",
      "type ${2:_X_}Suite struct {",
      "\tsuite.Default",
      "\t${3:$LINE_COMMENT SUT}",
      "}",
      "",
      "func (s *$2Suite) SetupTest() {",
      "\t$4",
      "}",
      "",
      "func (s *$2Suite) TestSentinel() {",
      "\t$6",
      "}",
      "",
      "func (s *$2Suite) Test$7$8${9|With,Without|}$10() {",
      "\t${11:$LINE_COMMENT Happy Path}",
      "}",
      "",
      "func (s *$2Suite) Test$12$13${14|Err,Panic|}$15() {",
      "\t${16:$LINE_COMMENT Corner Case}",
      "}",
      "",
      "func (s *$2Suite) TearDownTest() {",
      "\t$5",
      "}",
      "",
    ],
    "isFileTemplate": true,
    "scope": "go",
  },

  "Mock": {
    "prefix": ["go_mock"],
    "body": [
      "package ${TM_DIRECTORY/.*[\\/]/$1/}",
      "",
      "import (",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/services/mock\"",
      "",
      "\t$1",
      ")",
      "",
      "type ${2:_X_}Mock struct {",
      "\tmock.Default",
      "}",
      "",
      "func (m *$2Mock) ${3:_X_}(${4:_X_} ${5:any}) ${6:(string, error)} {",
      "\t${7:args := m.Called($4)\n\treturn args.Get(0).(string), nil}",
      "}",
      "",
    ],
    "isFileTemplate": true,
    "scope": "go",
  },

  "Mother": {
    "prefix": ["go_mother"],
    "body": [
      "package ${TM_DIRECTORY/.*[\\/]/$1/}",
      "",
      "import (",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/services/mother\"",
      ")",
      "",
      "type m struct {",
      "\t*mother.Mother",
      "}",
      "",
      "func (m *m) ${1:_X_}Valid() *$1 {",
      "\t${2:return nil}",
      "}",
      "",
      "func (m *m) $1Invalid() (${3:any}, error) {",
      "\t${4:return nil, nil}",
      "}",
      "",
      "var Mother = mother.New[m]",
      "",
    ],
    "isFileTemplate": true,
    "scope": "go",
  },

  "Assert": {
    "prefix": ["go_assert"],
    "body": ["s.Equal(expected, actual)"],
    "scope": "go",
  },

  /* -------------------------------------------------------------------------- */
  /*                                    Error                                   */
  /* -------------------------------------------------------------------------- */

  "Bubble": {
    "prefix": ["go_bubble"],
    "body": [
      "errors.New[errors.$1](&errors.Bubble{",
      "\tWhat: \"$2\",",
      "\tWhy: errors.Meta{",
      "\t\t\"$3\": \"$4\",",
      "\t},",
      "\tWho: err,",
      "})",
    ],
    "scope": "go",
  },

  "Bubble Up": {
    "prefix": ["go_up"],
    "body": ["if err != nil {", "\treturn errors.BubbleUp(err)", "}"],
    "scope": "go",
  },

  "Panic": {
    "prefix": ["go_panic"],
    "body": ["errors.Panic(${1:errors.Standard(\"$2\")})"],
    "scope": "go",
  },

  "Assertion": {
    "prefix": ["go_assertion"],
    "body": ["$1, ok := $2.($3)", "", "if !ok {", "\treturn errors.$4", "}"],
    "scope": "go",
  },

  "Join": {
    "prefix": ["go_join"],
    "body": [
      "if err := errors.Join($1); err != nil {",
      "\treturn ${2:nil,} errors.BubbleUp(err)",
      "}",
    ],
    "scope": "go",
  },

  /* -------------------------------------------------------------------------- */
  /*                                   Object                                   */
  /* -------------------------------------------------------------------------- */

  "Value Object": {
    "prefix": ["go_object"],
    "body": [
      "package ${TM_DIRECTORY/.*[\\/]/$1/}",
      "",
      "import (",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/errors\"",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/values\"",
      ")",
      "",
      "type ${1:_X_} struct {",
      "\tvalues.$2",
      "}",
      "",
      "func (${3:_X_} *$1) Validate() error {",
      "\tif values.IsNotValid($3.RawValue(), \"$4\") {",
      "\t\treturn errors.New[errors.$5](&errors.Bubble{",
      "\t\t\tWhat: \"$6\",",
      "\t\t})",
      "\t}",
      "",
      "\t$3.Valid()",
      "",
      "\treturn nil",
      "}",
      "",
    ],
    "isFileTemplate": true,
    "scope": "go",
  },

  "New Value Object": {
    "prefix": ["go_value"],
    "body": ["$1, err$2 := values.New[$3]($4)"],
    "scope": "go",
  },

  "Primitive Value Object": {
    "prefix": ["go_primitive"],
    "body": ["$1, err$2 := values.FromPrimitive[$3]($4${5:, true})"],
    "scope": "go",
  },

  /* -------------------------------------------------------------------------- */
  /*                                   Message                                  */
  /* -------------------------------------------------------------------------- */

  "Message Key": {
    "prefix": ["go_key"],
    "body": [
      "var ${1|Event,Command,Query,Response|}Key, _ = values.New[*messages.Key](messages.FormatKey(&messages.KeyComponents{",
      "\tService: \"$2\",",
      "\tVersion: \"$3\",",
      "\tType:    messages.Type.$4,",
      "\tEntity:  \"$5\",",
      "\tAction:  \"$6\",",
      "\tStatus:  messages.Status.$7,",
      "}))",
    ],
    "scope": "go",
  },

  "Message Recipient": {
    "prefix": ["go_recipient"],
    "body": [
      "var ${1:_X_}Recipient, _ = values.New[*messages.Recipient](messages.FormatRecipient(&messages.RecipientComponents{",
      "\tService: \"$2\",",
      "\tEntity:  \"$3\",",
      "\tTrigger: \"$4\",",
      "\tAction:  \"$5\",",
      "\tStatus:  messages.Status.$6,",
      "}))",
    ],
    "scope": "go",
  },

  "Message Attributes/Meta": {
    "prefix": ["go_attributes", "go_meta"],
    "body": [
      "type ${1|Event,Command,Query,Response|}${2|Attributes,Meta|} = struct {",
      "\t$3",
      "}",
    ],
    "scope": "go",
  },

  /* -------------------------------------------------------------------------- */
  /*                                  Aggregate                                 */
  /* -------------------------------------------------------------------------- */

  "Aggregate Root": {
    "prefix": ["go_aggregate"],
    "body": [
      "package ${TM_DIRECTORY/.*[\\/]/$1/}",
      "",
      "import (",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/aggregates/root\"",
      "",
      "\t$1",
      ")",
      "",
      "type ${2:_X_} struct {",
      "\t*root.Root",
      "\t$3",
      "}",
      "",
      "type Primitive struct {",
      "\t$4",
      "}",
      "",
      "type Criteria struct {",
      "\t$5",
      "}",
      "",
      "type Required struct {",
      "\t$6",
      "}",
      "",
      "func (${7:x} *$2) ToPrimitive() *Primitive {",
      "\t${8:return nil}",
      "}",
      "",
      "func FromPrimitive(primitive *Primitive) (*$2, error) {",
      "\t${9:return nil, nil}",
      "}",
      "",
      "func New(required *Required) (*$2, error) {",
      "\t${10:return nil, nil}",
      "}",
      "",
    ],
    "isFileTemplate": true,
    "scope": "go",
  },

  /* -------------------------------------------------------------------------- */
  /*                                  Use Case                                  */
  /* -------------------------------------------------------------------------- */

  "Use Case": {
    "prefix": ["go_case"],
    "body": [
      "package ${TM_DIRECTORY/.*[\\/]/$1/}",
      "",
      "import (",
      "\t$1",
      ")",
      "",
      "type Case struct {",
      "\t${2:$LINE_COMMENT Roles}",
      "}",
      "",
      "func (c *Case) Run($3) ${4:error} {",
      "\t${5:return nil}",
      "}",
      "",
    ],
    "isFileTemplate": true,
    "scope": "go",
  },

  /* -------------------------------------------------------------------------- */
  /*                                     EDA                                    */
  /* -------------------------------------------------------------------------- */

  "Event Consumer": {
    "prefix": ["go_event"],
    "body": [
      "package ${TM_DIRECTORY/.*[\\/]/$1/}",
      "",
      "import (",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/errors\"",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/messages\"",
      ")",
      "",
      "type EventAttributes = struct {",
      "\t$1",
      "}",
      "",
      "type EventMeta = struct {",
      "\t$2",
      "}",
      "",
      "type Consumer struct {",
      "\t*Case",
      "}",
      "",
      "func (c *Consumer) On(event *messages.Message) error {",
      "\tattributes, ok := event.Attributes.(*EventAttributes)",
      "",
      "\tif !ok {",
      "\t\treturn errors.EventAssertion()",
      "\t}",
      "",
      "\terr := c.Case.Run(attributes)",
      "",
      "\tif err != nil {",
      "\t\treturn errors.BubbleUp(err)",
      "\t}",
      "",
      "\treturn nil",
      "}",
      "",
    ],
    "isFileTemplate": true,
    "scope": "go",
  },

  /* -------------------------------------------------------------------------- */
  /*                                    CQRS                                    */
  /* -------------------------------------------------------------------------- */

  "Command Handler": {
    "prefix": ["go_command"],
    "body": [
      "package ${TM_DIRECTORY/.*[\\/]/$1/}",
      "",
      "import (",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/errors\"",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/messages\"",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/values\"",
      ")",
      "",
      "var CommandKey, _ = values.New[*messages.Key](messages.FormatKey(&messages.KeyComponents{",
      "\tService: \"$1\",",
      "\tVersion: \"$2\",",
      "\tType:    messages.Type.$3,",
      "\tEntity:  \"$4\",",
      "\tAction:  \"$5\",",
      "\tStatus:  messages.Status.$6,",
      "}))",
      "",
      "type CommandAttributes = struct {",
      "\t$7",
      "}",
      "",
      "type CommandMeta = struct {",
      "\t$8",
      "}",
      "",
      "type Handler struct {",
      "\t*Case",
      "}",
      "",
      "func (h *Handler) Handle(command *messages.Message) error {",
      "\tattributes, ok := command.Attributes.(*CommandAttributes)",
      "",
      "\tif !ok {",
      "\t\treturn errors.CommandAssertion()",
      "\t}",
      "",
      "\terr := h.Case.Run(attributes)",
      "",
      "\tif err != nil {",
      "\t\treturn errors.BubbleUp(err)",
      "\t}",
      "",
      "\treturn nil",
      "}",
      "",
    ],
    "isFileTemplate": true,
    "scope": "go",
  },

  "Query Handler": {
    "prefix": ["go_query"],
    "body": [
      "package ${TM_DIRECTORY/.*[\\/]/$1/}",
      "",
      "import (",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/errors\"",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/messages\"",
      "\t\"github.com/bastean/codexgo/v4/pkg/context/shared/domain/values\"",
      ")",
      "",
      "var QueryKey, _ = values.New[*messages.Key](messages.FormatKey(&messages.KeyComponents{",
      "\tService: \"$1\",",
      "\tVersion: \"$2\",",
      "\tType:    messages.Type.$3,",
      "\tEntity:  \"$4\",",
      "\tAction:  \"$5\",",
      "\tStatus:  messages.Status.$6,",
      "}))",
      "",
      "type QueryAttributes = struct {",
      "\t$7",
      "}",
      "",
      "type QueryMeta = struct {",
      "\t$8",
      "}",
      "",
      "var ResponseKey, _ = values.New[*messages.Key](messages.FormatKey(&messages.KeyComponents{",
      "\tService: \"$9\",",
      "\tVersion: \"$10\",",
      "\tType:    messages.Type.$11,",
      "\tEntity:  \"$12\",",
      "\tAction:  \"$13\",",
      "\tStatus:  messages.Status.$14,",
      "}))",
      "",
      "type ResponseAttributes = struct {",
      "\t$15",
      "}",
      "",
      "type ResponseMeta = struct {",
      "\t$16",
      "}",
      "",
      "type Handler struct {",
      "\t*Case",
      "}",
      "",
      "func (h *Handler) Handle(query *messages.Message) (*messages.Message, error) {",
      "\tattributes, ok := query.Attributes.(*QueryAttributes)",
      "",
      "\tif !ok {",
      "\t\treturn nil, errors.QueryAssertion()",
      "\t}",
      "",
      "\t${17:_X_}, err := h.Case.Run(attributes)",
      "",
      "\tif err != nil {",
      "\t\treturn nil, errors.BubbleUp(err)",
      "\t}",
      "",
      "\treturn messages.New(",
      "\t\tResponseKey,",
      "\t\t&ResponseAttributes{",
      "\t\t\t$18",
      "\t\t},",
      "\t\t${19:new(ResponseMeta)},",
      "\t), nil",
      "}",
      "",
    ],
    "isFileTemplate": true,
    "scope": "go",
  },

  /* -------------------------------------------------------------------------- */
  /*                                  Idiomatic                                 */
  /* -------------------------------------------------------------------------- */

  "Idiomatic": {
    "prefix": [
      "go_idiomatic",
      "go_infrastructure",
      "go_application",
      "go_module",
      "go_service",
      "go_app",
    ],
    "body": [
      "func ${1|New,Open,Close,Run,Handle,On,Start,Stop,Init,Up,Down|}$2($3) ${4:($5, error)} {",
      "\t${6|session|}, err := $7",
      "",
      "\tif err != nil {",
      "\t\t${8:return $9, err}",
      "\t}",
      "}",
    ],
    "scope": "go",
  },
}
